# Github worflow to test Agora on a variety of platforms
#
# The CI triggers on 'push' to upstream.
#
# Note:
# - Try to use the native Github action syntax (${{ expression }}) when possible,
#   as they are substituted with their value in the logs, unlike env variable.
#   For example use `${{ github.workspace }}` over `${GITHUB_WORKSPACE}`
name: CD pipeline

on:
  push:
    branches:
      - v*.x.x
      - v*.*.x
      # Use this branch name in your fork to test changes
      - github-actions

jobs:
  main:
    name: Run
    # The configuration matrix: We define all possible combinations here,
    # then add excludes for things we don't want to test,
    # and include to specify job-specific data.
    strategy:
      # Disable `fail-fast` because we want the whole test suite to run even if one
      # of the nigthly is broken
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04, macOS-10.15, windows-2019 ]
        dc: [ dmd-master, ldc-master ]
        exclude:
          # Not supported yet
          - os: windows-2019

    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    steps:

    # Checkout this repository and its submodules
    - uses: actions/checkout@v2
      with:
        submodules: true

    # Install the D compiler
    - name: Prepare compiler
      uses: mihails-strasuns/setup-dlang@v0.5.0
      with:
          compiler: ${{ matrix.dc }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}

    # Install os-specific packages
    # Those will show up in the list of steps, but be grayed out,
    # hence the usage of the `[OSX]` tag
    - name: '[OSX] Install dependencies & setup environment'
      if: runner.os == 'macOS'
      run: |
        brew install pkg-config
        ./ci/ci_osx_setup.sh
        echo ::set-env name=LIBRARY_PATH::${LD_LIBRARY_PATH-}:/usr/local/lib/
        echo ::set-env name=PKG_CONFIG_PATH::/usr/local/opt/sqlite/lib/pkgconfig:/usr/local/opt/openssl@1.1/lib/pkgconfig/

    - name: '[Linux] Install dependencies & setup environment'
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install libsqlite3-dev
        sudo apt-get install libsodium-dev
        sudo apt-get install g++-9

    # Add whatever debugging information can be useful in the long run here
    - name: Print system informations
      run: |
        ${DC} --version
        dub --version

    # Build and run the tests
    - name: Build & test Agora
      run: ./ci/run.sh
