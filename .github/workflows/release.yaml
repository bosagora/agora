# This workflow will only trigger when a release is created,
# as this is where the artifacts will be visible.
# To create a release, use the script `infrastructure/github/release.d`.
#
# There is no `repository == bosagora/agora` protection like in other CI scripts,
# as the artifacts are local to the repository, so there is no access issue,
# and releases are not part of the synchronization of a fork with an upstream,
# while commits and tags are, so creating a release in a fork is a deliberate action.
name: Generate native build for release

on:
  release:
    types:
      - published

jobs:
  build:
    name: 'Build artifacts for ${{ github.event.release.tag_name }}'
    strategy:
      fail-fast: false
      matrix:
        include:
         - { os: ubuntu-20.04, dc: ldc-1.28.1, triple: 'x86_64-linux-gnu-ubuntu-20.04' }
         - { os: macOS-11,     dc: ldc-1.28.1, triple: 'x86_64-apple-darwin-macOS11' }

    runs-on: ${{ matrix.os }}
    steps:
      - name: '[Linux] Install dependencies & setup environment'
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install libsodium-dev libsqlite3-dev clang

      - name: '[OSX] Install dependencies & setup environment'
        if: runner.os == 'macOS'
        run: |
          brew install coreutils libsodium pkg-config
          echo "LIBRARY_PATH=${LD_LIBRARY_PATH-}:/usr/local/lib/" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/local/opt/sqlite/lib/pkgconfig:/usr/local/opt/openssl@1.1/lib/pkgconfig/" >> $GITHUB_ENV

      - name: Install D build tools
        uses: dlang-community/setup-dlang@v1
        with:
          compiler: ${{ matrix.dc }}

      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: 'Build Agora and other configs'
        env:
          AGORA_VERSION: ${{ github.event.release.tag_name }}
        run: |
          dub build --skip-registry=all --compiler=${DC}
          mv -v build/agora build/agora-${{ github.event.release.tag_name }}+${{ matrix.triple }}
          dub build --skip-registry=all --compiler=${DC} -c client
          mv -v build/agora-client build/agora-client-${{ github.event.release.tag_name }}+${{ matrix.triple }}
          dub build --skip-registry=all --compiler=${DC} -c config-dumper
          mv -v build/agora-config-dumper  build/agora-config-dumper-${{ github.event.release.tag_name }}+${{ matrix.triple }}
          dub build --skip-registry=all --compiler=${DC} -c traced-server
          mv -v build/agora-traced build/agora-traced-${{ github.event.release.tag_name }}+${{ matrix.triple }}

      - name: 'Upload temporary binaries'
        uses: actions/upload-artifact@v2
        with:
          name: agora
          path: |
            build/*${{ matrix.triple }}
          if-no-files-found: error
          retention-days: 1

  release:
    name: "Update release artifacts"
    runs-on: ubuntu-latest
    needs:
      - build

    steps:
      - name: Download artifacts to release
        uses: actions/download-artifact@v2
        with:
          name: agora
          path: ~/artifacts/

      - name: List all artifacts included in the release
        id: list-artifacts
        shell: bash
        run: |
          set -euox pipefail
          ls -aul ~ ~/artifacts
          echo "::set-output name=artifacts_directory::$HOME/artifacts"

      - name: Update release artifacts
        uses: ncipollo/release-action@v1
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          tag: ${{ github.event.release.tag_name }}
          artifacts: ${{ steps.list-artifacts.outputs.artifacts_directory }}/*
          # Keep the existing state of the release
          allowUpdates: true
          artifactErrorsFailBuild: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          omitPrereleaseDuringUpdate: true
