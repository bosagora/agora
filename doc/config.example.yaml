################################################################################
## This is a sample, documented configuration file for Agora in YAML format
##
## It is not intended for usage on any network
##
## A node has two interfaces: one for network communication,
## and one for administration.
## The one communicating with the network is public,
## while the administrative is unsecured, disabled by default,
## and should not be exposed to the outside world.
## The administrative one is unsecured and should not be exposed to the outside
## world. It is disabled by default for security purpose.
################################################################################

################################################################################
##                             Network interface                              ##
################################################################################
node:
  # Minimum number of non-validating nodes to connect to before discovery is
  # considered complete
  min_listeners: 2
  # Maximum number of non-validating nodes to connect to
  max_listeners: 10
  # Number of milliseconds to wait between retrying requests
  retry_delay: 3000
  # Maximum number of retries to issue before a request is considered failed
  max_retries: 50
  # Timeout for each request in milliseconds
  timeout: 5000
  # Path to the data directory (if the path doesn't exist it will be created)
  data_dir: data
  # The local address where the stats server (currently Prometheus)
  # is going to connect to, for example: http://0.0.0.0:8008
  # It can also be set to -1 do disable listening (default is -1)
  stats_listening_port: 9110
  # The new block time offset has to be greater than the previous block time offset
  # but less than current time + block_time_offset_tolerance_secs
  block_time_offset_tolerance_secs: 60
  # The duration between requests for doing periodic network discovery
  network_discovery_interval_secs: 5
  # The duration between requests for retrieving the latest blocks
  # from all other nodes
  block_catchup_interval_secs: 20
  # The maximum number of transactions relayed in every batch.
  # Value 0 means no limit.
  relay_tx_max_num : 100
  # Transaction relay batch is triggered in every `relay_tx_interval_secs`.
  # Value 0 means, the transaction will be relayed immediately.
  relay_tx_interval_secs : 30
  # The minimum amount of fee a transaction has to have to be relayed.
  # The fee is adjusted by the transaction size:
  # adjusted fee = fee / transaction size in bytes.
  relay_tx_min_fee : 0
  # Transaction put into the relay queue will expire, and will be removed
  # after `relay_tx_cache_exp_secs`.
  relay_tx_cache_exp_secs : 1200
  # The percentage by which the double spend transaction's fee should be
  # increased in order to be added to the transaction pool
  double_spent_threshold_pct: 20

# Each entry in this array is an interface Agora will listen to, allowing to
# expose the same node on more than one network interface or with different
# API, such as having one interface using HTTP+JSON and the other TCP+binary.
interfaces:
  - type: http
    # Address to which we bind
    address: 0.0.0.0 # Any node can bind - default value
    # Port on which we bind
    port:    2826    # 0xB0A, default value

# Proxy to be used for outgoing Agora connections
proxy:
  url: http://127.0.0.0.1:8080

################################################################################
##                             Validator configuration                        ##
## The server can operate in two modes: full node and validator node.         ##
## The full node does not participate in consensus,                           ##
## it only replicates the state of the blockchain.                            ##
################################################################################
validator:
  # Whether or not we should act as a validator
  # When validating, the `seed` of an eligible account is required
  # An eligible account has at least 40k coins frozen in it
  enabled: true
  # This is a randomly generated keypair
  # If this node is not a validator, this will be ignored
  #
  # DO NOT USE THOSE VALUES ANYWHERE
  # Public address:  boa1xpvald2ydpxzl9aat978kv78y5g24jxy46mcnl7munf4jyhd0zjrc5x62kn
  seed: SAUHVPR7O7F2QGLDVXG3DQTVHXESE3ZAWHIIGKT35LCHIPLZBZTAFXJA
  # Address of the name registry
  registry_address: http://127.0.0.1:3003
  # Network addresses that will be registered with the public key (Validator only)
  # If left empty, all public network addresses of the node will be registered
  addresses_to_register:
    - 88.88.88.88
    - best.validator.io
  # Whether or not the Validator will enroll automatically at the startup or
  # at the end of Validator cycle
  recurring_enrollment: true
  # How often (in seconds) we should check for pre-images to reveal
  preimage_reveal_interval: 10

################################################################################
##                             Flash configuration                            ##
## Configuration options for the Flash functionality of the node.             ##
##                                                                            ##
################################################################################
flash:
  # Whether or not the Flash protocol should be supported
  enabled: true
  # Timeout for each request in milliseconds
  timeout: 10000
  # This is a randomly generated keypair
  # DO NOT USE THOSE VALUES ANYWHERE
  # Public address:  boa1xpvald2ydpxzl9aat978kv78y5g24jxy46mcnl7munf4jyhd0zjrc5x62kn
  seed: SAUHVPR7O7F2QGLDVXG3DQTVHXESE3ZAWHIIGKT35LCHIPLZBZTAFXJA

  # Address to the listener which will receive payment / update notifications
  listener_address: http://127.0.0.1:4004

  # Minimum funding allowed for a channel to be opened (in BOA)
  min_funding: 0

  # Maximum funding allowed for a channel to be opened (in BOA)
  max_funding: 100000

  # Minimum number of blocks before settling can begin after a trigger
  # transaction has been published
  min_settle_time: 6

  # Maximum number of blocks afte which settling can begin after a trigger
  # transaction has been published
  max_settle_time: 144

  # Maximum number of milliseconds to re-try a failed payment / update request
  # before the request is considered failed and is reported to the listener
  # (wallet / etc)
  max_retry_time: 60000

################################################################################
##                         Ban manager configuration                          ##
################################################################################
banman:
  # max failed requests until an address is banned
  max_failed_requests: 100
  # the default duration of a ban
  ban_duration: 86400

################################################################################
##                          Administrative interface                          ##
################################################################################
admin:
  enabled: true      # `false` by default
  address: 127.0.0.1 # Private
  port:    2827      # 0xB0B

################################################################################
##                               Node discovery                               ##
##                                                                            ##
## When the network first starts, we need to connect to some peers to learn   ##
## the topology and find a safe intersection to listen to, and, if we are     ##
## a validator, to insert ourselves.                                          ##
################################################################################
network:
  # Supported value: IPv4, IPv6
  - http://192.168.1.42:2828
  - http://192.168.0.44:2828
dns:
  # Supported value: FQDN seed
  - seed.bosagora.io

################################################################################
##                               Logging options                              ##
##                                                                            ##
## Our logging system is hierarchical: Logger names are, e.g. `a.b.c.d`.      ##
## Inside agora, every module that logs have a module-level logger matching   ##
## it's module name, e.g. `agora.node.main`.                                  ##
##                                                                            ##
## In addition, some modules can have more nested loggers: one such use case  ##
## is for a module which deals with client connections, which we'll refer to  ##
## as `agora.network.Client` here. Such a module would produce a confusing    ##
## output if it was logging all clients interactions at module level, because ##
## such interactions are intertwinned and requests/responses would be hard to ##
## follow. Hence, using a predictable identifier to extend the hierarchy,     ##
## such as the public key (when dealing with validators), would lead to the   ##
## following loggers: `agora.network.Client.GABC`,                            ##
## `agora.network.Client.GEFG`, `agora.network.Client.G1234`, etc...          ##
##                                                                            ##
## When configuring loggers, the configuration applies to the referenced      ##
## hierarchy and any child. Using the previous example, configuring           ##
## `agora.network` will lead to all clients having the same configuration,    ##
## as well as the module `agora.network.Foobar`.                              ##
##                                                                            ##
## The 'root' name allows to configure the parent of all other loggers.       ##
################################################################################
logging:
  root:
    # Set the log level for the root logger.
    # This is the default log level, and is overriden by more specialized configs
    #
    # Values: Trace, Info, Warn, Error, Fatal, None (default)
    level: Info
    # Whether or not to log output to the console
    console: true
    # Output file to write the logging output to
    # Note that output of a more specialized logger that uses another file won't be
    # written to this file.
    # The path is relative to `data_dir` unless an absolute path is supplied.
    # Intermediate directories will be created as needed.
    # This setting is optional, as no file would be written to if empty / not supplied.
    file: log/root.log

  # Nested logger configuration
  # Order does not matter as long as there is no duplication
  agora.network:
    level: Trace
    console: false
    file: log/network.log
  agora.node:
    level: Trace
    console: false
    file: log/node.log

 ################################################################################
##                               Event Handlers                               ##
################################################################################
event_handlers:
  # URLs to push a data when a block is externalized. (path is "/block_externalized")
  block_externalized:
    - http://127.0.0.1:3836/block_externalized
  # URLs to push a data when a pre-image is updated. (path is "/preimage_received")
  preimage_received:
    - http://127.0.0.1:3836/preimage_received
  # URLs to push a data when a transaction is updated. (path is "/transaction_received")
  transaction_received:
    - http://127.0.0.1:3836/transaction_received
