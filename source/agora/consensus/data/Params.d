/*******************************************************************************

    The set for consensus-critical constants

    This defines the class for the consensus-critical constants. Only one
    object should exist for a single node. The `class` is `immutable`, hence
    the constants need to be set at the start of the process. The
    consensus-critical constants are the protocol-level constants, so they
    shouldn't be modified outside of test environments.

    Copyright:
        Copyright (c) 2019-2020 BOS Platform Foundation Korea
        All rights reserved.

    License:
        MIT License. See LICENSE for details.

*******************************************************************************/

module agora.consensus.data.Params;

import agora.common.Amount;
import agora.common.crypto.Key;
import agora.consensus.data.Block;

import core.stdc.time;

/// Ditto
public immutable class ConsensusParams
{
    /// The cycle length for a validator
    public uint ValidatorCycle;

    /// Maximum number of nodes to include in an autogenerated quorum set
    public uint MaxQuorumNodes;

    /// The threshold to use for the generated quorums
    public uint QuorumThreshold;

    /// The maximum number of blocks before a quorum shuffle takes place.
    /// Note that a shuffle may occur before the cycle ends if the active
    /// validator set changes (new enrollments, expired enrollments..)
    public uint QuorumShuffleInterval;

    /// The Genesis block of the chain
    public Block Genesis;

    /// How often blocks should be created
    public uint BlockIntervalSeconds;

    /// The address of commons budget
    public PublicKey CommonsBudgetAddress;

    /// The maximum size of the payload
    public uint TxPayloadMaxSize;

    /// The factor to calculate for the fee of the payload
    public uint TxPayloadFeeFactor;

    /// The share that Validators would get out of the transction fees (Out of 100)
    /// The rest would go to the Commons Budget
    public ubyte ValidatorTXFeeCut;

    /// How frequent the payments to Validators will be in blocks
    public uint PayoutPeriod;

    /// The amount of a penalty for slashed validators
    public Amount SlashPenaltyAmount;


    /***************************************************************************

        Constructor

        Params:
            genesis = Genesis block to use for this chain
            validator_cycle = cycle length for a validator
            max_quorum_nodes = max nodes to include in autogenerated quorum set
            quorum_threshold = the threshold to use for the generated quorums
            slash_penalty_amount = amount of a penalty for slashed validators

    ***************************************************************************/

    public this (immutable(Block) genesis,
                 in PublicKey commons_budget_address,
                 uint validator_cycle = 1008,
                 uint max_quorum_nodes = 7, uint quorum_threshold = 80,
                 uint quorum_shuffle_interval = 30,
                 uint block_interval_sec = 1,
                 uint tx_payload_maxsize = 1024,
                 uint tx_payload_fee_factor = 200,
                 ubyte validator_tx_fee_cut = 70,
                 uint payout_period = 144,
                 Amount slash_penalty_amount = 10_000.coins)
    {
        this.Genesis = genesis;
        this.CommonsBudgetAddress = commons_budget_address,
        this.ValidatorCycle = validator_cycle;
        this.MaxQuorumNodes = max_quorum_nodes;
        this.QuorumThreshold = quorum_threshold;
        this.QuorumShuffleInterval = quorum_shuffle_interval;
        this.BlockIntervalSeconds = block_interval_sec;
        this.TxPayloadMaxSize = tx_payload_maxsize;
        this.TxPayloadFeeFactor = tx_payload_fee_factor;
        this.ValidatorTXFeeCut = validator_tx_fee_cut;
        this.PayoutPeriod = payout_period;
        this.SlashPenaltyAmount = slash_penalty_amount;
    }

    /// Default for unittest, uses the test genesis block
    version (unittest) public this (
        uint validator_cycle = 1008, uint max_quorum_nodes = 7,
        uint quorum_threshold = 80)
    {
        import agora.consensus.data.genesis.Test : GenesisBlock;
        import agora.utils.WellKnownKeys;
        this(GenesisBlock, CommonsBudget.address, validator_cycle, max_quorum_nodes, quorum_threshold);
    }
}
